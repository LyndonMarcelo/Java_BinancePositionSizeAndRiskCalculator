/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package risk.leveragepossizecalcuforbinance;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lance
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    double rowCount;
    int rowCountInt=0;
    double lastRiskPerc = 0;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        cheatSheet = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        accSize = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        TPMulti = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        orderTypeSelector = new javax.swing.JComboBox<>();
        riskPercent = new javax.swing.JTextField();
        leverage = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        prevTable = new javax.swing.JButton();
        nextTable = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        cheatSheet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Risk%", "Leveraged Risk%", "Account% to be used", "Leveraged Gain%", "Price to Open Position", "Net Loss", "Net Profit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cheatSheet.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(cheatSheet);
        if (cheatSheet.getColumnModel().getColumnCount() > 0) {
            cheatSheet.getColumnModel().getColumn(0).setResizable(false);
            cheatSheet.getColumnModel().getColumn(0).setPreferredWidth(4);
            cheatSheet.getColumnModel().getColumn(1).setResizable(false);
            cheatSheet.getColumnModel().getColumn(2).setResizable(false);
            cheatSheet.getColumnModel().getColumn(3).setResizable(false);
            cheatSheet.getColumnModel().getColumn(4).setResizable(false);
            cheatSheet.getColumnModel().getColumn(5).setResizable(false);
            cheatSheet.getColumnModel().getColumn(5).setPreferredWidth(1);
            cheatSheet.getColumnModel().getColumn(6).setResizable(false);
            cheatSheet.getColumnModel().getColumn(6).setPreferredWidth(1);
        }

        jLabel5.setText("Account Size:");

        jLabel6.setText("TP Multiplier:");

        TPMulti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TPMultiActionPerformed(evt);
            }
        });

        jLabel1.setText("Risk% from Account:");

        jLabel2.setText("Leverage:");

        jLabel4.setText("Order Type:");

        orderTypeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Limit", "Market", "BUSD Limit" }));
        orderTypeSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderTypeSelectorActionPerformed(evt);
            }
        });

        jButton1.setText("Compute");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(riskPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(accSize, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(orderTypeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leverage)
                    .addComponent(TPMulti, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(riskPercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(leverage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(TPMulti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(orderTypeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        prevTable.setText("<<");
        prevTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevTableActionPerformed(evt);
            }
        });

        nextTable.setText(">>");
        nextTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(prevTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextTable)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(prevTable)
                        .addComponent(nextTable)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void orderTypeSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderTypeSelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderTypeSelectorActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        lastRiskPerc = 0;
        
        DefaultTableModel tblDisplay = (DefaultTableModel)cheatSheet.getModel();
        
        tblDisplay.setRowCount(0);
        
        double levRiskDisplay = 0;
        
        
        //rowCount = Math.ceil(Double.parseDouble(maxSLPercent.getText())/0.05);
        //rowCountInt = (int)rowCount;
        
        for(int i = 0; i<20; i++){ //change 20 to rowcountint
            
            //RiskPercent Cell
            lastRiskPerc = Math.round((lastRiskPerc + 0.01)*100.0)/100.0;           //change 0.01 to 0.05
            String RPDString = String.valueOf(lastRiskPerc);

            //LeveragedRisk Cell
            double feeAdd;
            if(orderTypeSelector.getSelectedItem().equals("Limit")){
                feeAdd = 0.04*Double.parseDouble(leverage.getText());
            }
            
            else if (orderTypeSelector.getSelectedItem().equals("Market")){
                feeAdd = 0.08*Double.parseDouble(leverage.getText());
            }
            
            else{
                feeAdd = 0.024*Double.parseDouble(leverage.getText());
            }

            levRiskDisplay = Math.round((lastRiskPerc*(Double.parseDouble(leverage.getText()))+feeAdd)*1000.0)/1000.0;
            String LRDString = String.valueOf(levRiskDisplay);
            
            //Account% Cell
            double accRiskDisplay = Math.floor((Double.parseDouble(riskPercent.getText())/levRiskDisplay)*100);
            String ARDString = String.valueOf(accRiskDisplay);
            
            //LeveragedGain% Cell
            double levGainDisplay = Math.round((((lastRiskPerc*Double.parseDouble(TPMulti.getText()))*Double.parseDouble(leverage.getText()))-feeAdd)*100.0)/100.0;
            String LGDString = String.valueOf(levGainDisplay);
            
            //PositionPrice Cell
            double positionPriceDisplay = Math.round((Double.parseDouble(accSize.getText())*(accRiskDisplay/100))*1000.0)/1000.0;
            String PPDString = String.valueOf(positionPriceDisplay);
            
            //NetLoss Cell
            double netLossDisplay = Math.round((positionPriceDisplay*(levRiskDisplay/100))*10000.0)/10000.0;
            String NLDString = String.valueOf(netLossDisplay);
            
            //NetProfit Cell
            double netProfitDisplay = Math.round((positionPriceDisplay*(levGainDisplay/100))*10000.0)/10000.0;
            String NPDString = String.valueOf(netProfitDisplay);
                        
            String data[]={RPDString, LRDString, ARDString, LGDString, PPDString, NLDString, NPDString};
            tblDisplay.addRow(data);
            

        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void TPMultiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TPMultiActionPerformed

    }//GEN-LAST:event_TPMultiActionPerformed

    private void nextTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextTableActionPerformed

        //lastRiskPerc = lastRiskPerc + 0.2;
        
        DefaultTableModel tblDisplay = (DefaultTableModel)cheatSheet.getModel();
        
        tblDisplay.setRowCount(0);
        
        double levRiskDisplay = 0;
        
        
        //rowCount = Math.ceil(Double.parseDouble(maxSLPercent.getText())/0.05);
        //rowCountInt = (int)rowCount;
        
        for(int i = 0; i<20; i++){ //change 20 to rowcountint
            
            //RiskPercent Cell
            lastRiskPerc = Math.round((lastRiskPerc + 0.01)*100.0)/100.0;           //change 0.01 to 0.05
            String RPDString = String.valueOf(lastRiskPerc);

            //LeveragedRisk Cell
            double feeAdd;
            if(orderTypeSelector.getSelectedItem().equals("Limit")){
                feeAdd = 0.04*Double.parseDouble(leverage.getText());
            }
            
            else if (orderTypeSelector.getSelectedItem().equals("Market")){
                feeAdd = 0.08*Double.parseDouble(leverage.getText());
            }
            
            else{
                feeAdd = 0.024*Double.parseDouble(leverage.getText());
            }
            

            levRiskDisplay = Math.round((lastRiskPerc*(Double.parseDouble(leverage.getText()))+feeAdd)*1000.0)/1000.0;
            String LRDString = String.valueOf(levRiskDisplay);
            
            //Account% Cell
            double accRiskDisplay = Math.floor((Double.parseDouble(riskPercent.getText())/levRiskDisplay)*100);
            String ARDString = String.valueOf(accRiskDisplay);
            
            //LeveragedGain% Cell
            double levGainDisplay = Math.round((((lastRiskPerc*Double.parseDouble(TPMulti.getText()))*Double.parseDouble(leverage.getText()))-feeAdd)*100.0)/100.0;
            String LGDString = String.valueOf(levGainDisplay);
            
            //PositionPrice Cell
            double positionPriceDisplay = Math.round((Double.parseDouble(accSize.getText())*(accRiskDisplay/100))*1000.0)/1000.0;
            String PPDString = String.valueOf(positionPriceDisplay);
            
            //NetLoss Cell
            double netLossDisplay = Math.round((positionPriceDisplay*(levRiskDisplay/100))*10000.0)/10000.0;
            String NLDString = String.valueOf(netLossDisplay);
            
            //NetProfit Cell
            double netProfitDisplay = Math.round((positionPriceDisplay*(levGainDisplay/100))*10000.0)/10000.0;
            String NPDString = String.valueOf(netProfitDisplay);
                        
            String data[]={RPDString, LRDString, ARDString, LGDString, PPDString, NLDString, NPDString};
            tblDisplay.addRow(data);
            

        }
    }//GEN-LAST:event_nextTableActionPerformed

    private void prevTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevTableActionPerformed
        
        if(lastRiskPerc != 0.2){
        
            lastRiskPerc = lastRiskPerc - 0.4;

            DefaultTableModel tblDisplay = (DefaultTableModel)cheatSheet.getModel();

            tblDisplay.setRowCount(0);

            double levRiskDisplay = 0;


            //rowCount = Math.ceil(Double.parseDouble(maxSLPercent.getText())/0.05);
            //rowCountInt = (int)rowCount;

            for(int i = 0; i<20; i++){ //change 20 to rowcountint

                //RiskPercent Cell
                lastRiskPerc = Math.round((lastRiskPerc + 0.01)*100.0)/100.0;           //change 0.01 to 0.05
                String RPDString = String.valueOf(lastRiskPerc);

                //LeveragedRisk Cell
                double feeAdd;
                if(orderTypeSelector.getSelectedItem().equals("Limit")){
                    feeAdd = 0.04*Double.parseDouble(leverage.getText());
                }
            
                else if (orderTypeSelector.getSelectedItem().equals("Market")){
                    feeAdd = 0.08*Double.parseDouble(leverage.getText());
                }
            
                else{
                    feeAdd = 0.024*Double.parseDouble(leverage.getText());
                }

                levRiskDisplay = Math.round((lastRiskPerc*(Double.parseDouble(leverage.getText()))+feeAdd)*1000.0)/1000.0;
                String LRDString = String.valueOf(levRiskDisplay);

                //Account% Cell
                double accRiskDisplay = Math.floor((Double.parseDouble(riskPercent.getText())/levRiskDisplay)*100);
                String ARDString = String.valueOf(accRiskDisplay);

                //LeveragedGain% Cell
                double levGainDisplay = Math.round((((lastRiskPerc*Double.parseDouble(TPMulti.getText()))*Double.parseDouble(leverage.getText()))-feeAdd)*100.0)/100.0;
                String LGDString = String.valueOf(levGainDisplay);

                //PositionPrice Cell
                double positionPriceDisplay = Math.round((Double.parseDouble(accSize.getText())*(accRiskDisplay/100))*1000.0)/1000.0;
                String PPDString = String.valueOf(positionPriceDisplay);

                //NetLoss Cell
                double netLossDisplay = Math.round((positionPriceDisplay*(levRiskDisplay/100))*10000.0)/10000.0;
                String NLDString = String.valueOf(netLossDisplay);

                //NetProfit Cell
                double netProfitDisplay = Math.round((positionPriceDisplay*(levGainDisplay/100))*10000.0)/10000.0;
                String NPDString = String.valueOf(netProfitDisplay);

                String data[]={RPDString, LRDString, ARDString, LGDString, PPDString, NLDString, NPDString};
                tblDisplay.addRow(data);


            }
        }
    }//GEN-LAST:event_prevTableActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TPMulti;
    private javax.swing.JTextField accSize;
    private javax.swing.JTable cheatSheet;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField leverage;
    private javax.swing.JButton nextTable;
    private javax.swing.JComboBox<String> orderTypeSelector;
    private javax.swing.JButton prevTable;
    private javax.swing.JTextField riskPercent;
    // End of variables declaration//GEN-END:variables
}
